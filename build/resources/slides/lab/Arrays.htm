<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0062)http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html -->
<!--NewPage--><HTML><HEAD><TITLE>Arrays (Java Platform SE 6)</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type><!-- Generated by javadoc (build 1.6.0_30) on Wed Nov 30 13:41:31 PST 2011 -->
<META name=date content=2011-11-30>
<META name=keywords content="java.util.Arrays class">
<META name=keywords content=sort()>
<META name=keywords content=binarySearch()>
<META name=keywords content=equals()>
<META name=keywords content=fill()>
<META name=keywords content=copyOf()>
<META name=keywords content=copyOfRange()>
<META name=keywords content=asList()>
<META name=keywords content=hashCode()>
<META name=keywords content=deepHashCode()>
<META name=keywords content=deepEquals()>
<META name=keywords content=toString()>
<META name=keywords content=deepToString()><LINK title=Style rel=stylesheet 
type=text/css href="Arrays_file/stylesheet.css">
<SCRIPT type=text/javascript>
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Arrays (Java Platform SE 6)";
    }
}
</SCRIPT>
<NOSCRIPT></NOSCRIPT>
<META name=GENERATOR content="MSHTML 8.00.6001.23520"></HEAD>
<BODY onload=windowTitle(); bgColor=white>
<HR>
<!-- ========= START OF TOP NAVBAR ======= --><A name=navbar_top><!-- --></A><A 
title="Skip navigation links" 
href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#skip-navbar_top"></A>
<TABLE border=0 cellSpacing=0 summary="" cellPadding=1 width="100%">
  <TBODY>
  <TR>
    <TD class=NavBarCell1 bgColor=#eeeeff colSpan=2><A 
      name=navbar_top_firstrow><!-- --></A>
      <TABLE border=0 cellSpacing=3 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=middle>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/overview-summary.html"><FONT 
            class=NavBarFont1><B>Overview</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/package-summary.html"><FONT 
            class=NavBarFont1><B>Package</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1Rev bgColor=#ffffff>&nbsp;<FONT 
            class=NavBarFont1Rev><B>Class</B></FONT>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/class-use/Arrays.html"><FONT 
            class=NavBarFont1><B>Use</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/package-tree.html"><FONT 
            class=NavBarFont1><B>Tree</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/deprecated-list.html"><FONT 
            class=NavBarFont1><B>Deprecated</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/index-files/index-1.html"><FONT 
            class=NavBarFont1><B>Index</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/help-doc.html"><FONT 
            class=NavBarFont1><B>Help</B></FONT></A>&nbsp;</TD></TR></TBODY></TABLE></TD>
    <TD vAlign=top rowSpan=3 
      align=right><EM><B>Java™&nbsp;Platform<BR>Standard&nbsp;Ed.&nbsp;6</B></EM> 
    </TD></TR>
  <TR>
    <TD class=NavBarCell2 bgColor=white><FONT size=-2>&nbsp;<A 
      title="class in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html"><B>PREV 
      CLASS</B></A>&nbsp; &nbsp;<A title="class in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/BitSet.html"><B>NEXT 
      CLASS</B></A></FONT></TD>
    <TD class=NavBarCell2 bgColor=white><FONT size=-2><A 
      href="http://docs.oracle.com/javase/6/docs/api/index.html?java/util/Arrays.html" 
      target=_top><B>FRAMES</B></A> &nbsp; &nbsp;<A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html" 
      target=_top><B>NO FRAMES</B></A> &nbsp; &nbsp;
      <SCRIPT type=text/javascript>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
       <NOSCRIPT><A 
      href="http://docs.oracle.com/javase/6/docs/api/allclasses-noframe.html"><B>All 
      Classes</B></A> </NOSCRIPT></FONT></TD></TR>
  <TR>
    <TD class=NavBarCell3 vAlign=top><FONT 
      size=-2>SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#method_summary">METHOD</A></FONT></TD>
    <TD class=NavBarCell3 vAlign=top><FONT 
      size=-2>DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#method_detail">METHOD</A></FONT></TD></TR></TBODY></TABLE><A 
name=skip-navbar_top></A><!-- ========= END OF TOP NAVBAR ========= -->
<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2><FONT size=-1>java.util</FONT> <BR>Class Arrays</H2><PRE><A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">java.lang.Object</A>
  <IMG alt="extended by " src="Arrays_file/inherit.gif"><B>java.util.Arrays</B>
</PRE>
<HR>

<DL>
  <DT><PRE>public class <B>Arrays</B><DT>extends <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A></DT></PRE></DT></DL><PRE></PRE>
<P>This class contains various methods for manipulating arrays (such as sorting 
and searching). This class also contains a static factory that allows arrays to 
be viewed as lists. 
<P>The methods in this class all throw a <TT>NullPointerException</TT> if the 
specified array reference is null, except where noted. 
<P>The documentation for the methods contained in this class includes briefs 
description of the <I>implementations</I>. Such descriptions should be regarded 
as <I>implementation notes</I>, rather than parts of the <I>specification</I>. 
Implementors should feel free to substitute other algorithms, so long as the 
specification itself is adhered to. (For example, the algorithm used by 
<TT>sort(Object[])</TT> does not have to be a mergesort, but it does have to be 
<I>stable</I>.) 
<P>This class is a member of the <A 
href="http://docs.oracle.com/javase/6/docs/technotes/guides/collections/index.html">Java 
Collections Framework</A>. 
<P>
<P>
<DL>
  <DT><B>Since:</B></DT>
  <DD>1.2</DD></DL>
<HR>

<P><!-- ========== METHOD SUMMARY =========== --><A 
name=method_summary><!-- --></A></P>
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=2 align=left><FONT size=+2><B>Method Summary</B></FONT></TH></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; <A 
            title="interface in java.util" 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html">List</A>&lt;T&gt;</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#asList(T...)">asList</A></B>(T...&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      fixed-size list backed by the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(byte[], byte)">binarySearch</A></B>(byte[]&nbsp;a, 
      byte&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of bytes for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(byte[], int, int, byte)">binarySearch</A></B>(byte[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, byte&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of bytes for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(char[], char)">binarySearch</A></B>(char[]&nbsp;a, 
      char&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of chars for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(char[], int, int, char)">binarySearch</A></B>(char[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, char&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of chars for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(double[], double)">binarySearch</A></B>(double[]&nbsp;a, 
      double&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of doubles for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(double[], int, int, double)">binarySearch</A></B>(double[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, double&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of doubles for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(float[], float)">binarySearch</A></B>(float[]&nbsp;a, 
      float&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of floats for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(float[], int, int, float)">binarySearch</A></B>(float[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, float&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of floats for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(int[], int)">binarySearch</A></B>(int[]&nbsp;a, 
      int&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of ints for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(int[], int, int, int)">binarySearch</A></B>(int[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, int&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of ints for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(long[], int, int, long)">binarySearch</A></B>(long[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, long&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of longs for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(long[], long)">binarySearch</A></B>(long[]&nbsp;a, 
      long&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of longs for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(java.lang.Object[], int, int, java.lang.Object)">binarySearch</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array for the specified object using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(java.lang.Object[], java.lang.Object)">binarySearch</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a, 
      <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array for the specified object using the binary search 
      algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(short[], int, int, short)">binarySearch</A></B>(short[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, short&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array of shorts for the specified value using the 
      binary search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(short[], short)">binarySearch</A></B>(short[]&nbsp;a, 
      short&nbsp;key)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array of shorts for the specified value using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; 
        int</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(T[], int, int, T, java.util.Comparator)">binarySearch</A></B>(T[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, T&nbsp;key, <A 
      title="interface in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? 
      super T&gt;&nbsp;c)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches a 
      range of the specified array for the specified object using the binary 
      search algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; 
        int</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch(T[], T, java.util.Comparator)">binarySearch</A></B>(T[]&nbsp;a, 
      T&nbsp;key, <A title="interface in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? 
      super T&gt;&nbsp;c)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Searches 
      the specified array for the specified object using the binary search 
      algorithm.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(boolean[], int)">copyOf</A></B>(boolean[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with <TT>false</TT> (if necessary) 
      so the copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;byte[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(byte[], int)">copyOf</A></B>(byte[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with zeros (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;char[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(char[], int)">copyOf</A></B>(char[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with null characters (if necessary) 
      so the copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;double[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(double[], int)">copyOf</A></B>(double[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with zeros (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;float[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(float[], int)">copyOf</A></B>(float[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with zeros (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(int[], int)">copyOf</A></B>(int[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with zeros (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;long[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(long[], int)">copyOf</A></B>(long[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with zeros (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;short[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(short[], int)">copyOf</A></B>(short[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with zeros (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; 
        T[]</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(T[], int)">copyOf</A></B>(T[]&nbsp;original, 
      int&nbsp;newLength)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with nulls (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T,U&gt; 
        T[]</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOf(U[], int, java.lang.Class)">copyOf</A></B>(U[]&nbsp;original, 
      int&nbsp;newLength, <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html">Class</A>&lt;? 
      extends T[]&gt;&nbsp;newType)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified array, truncating or padding with nulls (if necessary) so the 
      copy has the specified length.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(boolean[], int, int)">copyOfRange</A></B>(boolean[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;byte[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(byte[], int, int)">copyOfRange</A></B>(byte[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;char[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(char[], int, int)">copyOfRange</A></B>(char[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;double[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(double[], int, int)">copyOfRange</A></B>(double[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;float[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(float[], int, int)">copyOfRange</A></B>(float[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(int[], int, int)">copyOfRange</A></B>(int[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;long[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(long[], int, int)">copyOfRange</A></B>(long[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;short[]</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(short[], int, int)">copyOfRange</A></B>(short[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; 
        T[]</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(T[], int, int)">copyOfRange</A></B>(T[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T,U&gt; 
        T[]</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange(U[], int, int, java.lang.Class)">copyOfRange</A></B>(U[]&nbsp;original, 
      int&nbsp;from, int&nbsp;to, <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html">Class</A>&lt;? 
      extends T[]&gt;&nbsp;newType)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies the 
      specified range of the specified array into a new array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepEquals(java.lang.Object[], java.lang.Object[])">deepEquals</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a1, 
      <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays are <I>deeply equal</I> to one 
      another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepHashCode(java.lang.Object[])">deepHashCode</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the "deep contents" of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepToString(java.lang.Object[])">deepToString</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the "deep contents" of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(boolean[], boolean[])">equals</A></B>(boolean[]&nbsp;a, 
      boolean[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of booleans are <I>equal</I> to 
      one another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(byte[], byte[])">equals</A></B>(byte[]&nbsp;a, 
      byte[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of bytes are <I>equal</I> to one 
      another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(char[], char[])">equals</A></B>(char[]&nbsp;a, 
      char[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of chars are <I>equal</I> to one 
      another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(double[], double[])">equals</A></B>(double[]&nbsp;a, 
      double[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of doubles are <I>equal</I> to 
      one another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(float[], float[])">equals</A></B>(float[]&nbsp;a, 
      float[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of floats are <I>equal</I> to 
      one another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(int[], int[])">equals</A></B>(int[]&nbsp;a, 
      int[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of ints are <I>equal</I> to one 
      another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(long[], long[])">equals</A></B>(long[]&nbsp;a, 
      long[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of longs are <I>equal</I> to one 
      another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(java.lang.Object[], java.lang.Object[])">equals</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a, 
      <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of Objects are <I>equal</I> to 
      one another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(short[], short[])">equals</A></B>(short[]&nbsp;a, 
      short[]&nbsp;a2)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns 
      <TT>true</TT> if the two specified arrays of shorts are <I>equal</I> to 
      one another.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(boolean[], boolean)">fill</A></B>(boolean[]&nbsp;a, 
      boolean&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified boolean value to each element of the specified array of 
      booleans.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(boolean[], int, int, boolean)">fill</A></B>(boolean[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, boolean&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified boolean value to each element of the specified range of the 
      specified array of booleans.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(byte[], byte)">fill</A></B>(byte[]&nbsp;a, 
      byte&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified byte value to each element of the specified array of 
    bytes.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(byte[], int, int, byte)">fill</A></B>(byte[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, byte&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified byte value to each element of the specified range of the 
      specified array of bytes.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(char[], char)">fill</A></B>(char[]&nbsp;a, 
      char&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified char value to each element of the specified array of 
    chars.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(char[], int, int, char)">fill</A></B>(char[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, char&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified char value to each element of the specified range of the 
      specified array of chars.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(double[], double)">fill</A></B>(double[]&nbsp;a, 
      double&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified double value to each element of the specified array of 
      doubles.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(double[], int, int, double)">fill</A></B>(double[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, double&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified double value to each element of the specified range of the 
      specified array of doubles.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(float[], float)">fill</A></B>(float[]&nbsp;a, 
      float&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified float value to each element of the specified array of 
    floats.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(float[], int, int, float)">fill</A></B>(float[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, float&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified float value to each element of the specified range of the 
      specified array of floats.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(int[], int)">fill</A></B>(int[]&nbsp;a, 
      int&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified int value to each element of the specified array of 
  ints.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(int[], int, int, int)">fill</A></B>(int[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, int&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified int value to each element of the specified range of the 
      specified array of ints.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(long[], int, int, long)">fill</A></B>(long[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, long&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified long value to each element of the specified range of the 
      specified array of longs.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(long[], long)">fill</A></B>(long[]&nbsp;a, 
      long&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified long value to each element of the specified array of 
    longs.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(java.lang.Object[], int, int, java.lang.Object)">fill</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified Object reference to each element of the specified range of 
      the specified array of Objects.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(java.lang.Object[], java.lang.Object)">fill</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a, 
      <A title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified Object reference to each element of the specified array of 
      Objects.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(short[], int, int, short)">fill</A></B>(short[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, short&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified short value to each element of the specified range of the 
      specified array of shorts.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#fill(short[], short)">fill</A></B>(short[]&nbsp;a, 
      short&nbsp;val)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assigns 
      the specified short value to each element of the specified array of 
    shorts.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(boolean[])">hashCode</A></B>(boolean[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(byte[])">hashCode</A></B>(byte[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(char[])">hashCode</A></B>(char[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(double[])">hashCode</A></B>(double[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(float[])">hashCode</A></B>(float[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(int[])">hashCode</A></B>(int[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(long[])">hashCode</A></B>(long[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(java.lang.Object[])">hashCode</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(short[])">hashCode</A></B>(short[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      hash code based on the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(byte[])">sort</A></B>(byte[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of bytes into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(byte[], int, int)">sort</A></B>(byte[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of bytes into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(char[])">sort</A></B>(char[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of chars into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(char[], int, int)">sort</A></B>(char[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of chars into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(double[])">sort</A></B>(double[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of doubles into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(double[], int, int)">sort</A></B>(double[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of doubles into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(float[])">sort</A></B>(float[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of floats into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(float[], int, int)">sort</A></B>(float[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of floats into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(int[])">sort</A></B>(int[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of ints into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(int[], int, int)">sort</A></B>(int[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of ints into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(long[])">sort</A></B>(long[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of longs into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(long[], int, int)">sort</A></B>(long[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of longs into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(java.lang.Object[])">sort</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of objects into ascending order, according to the <A 
      title="interface in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
      ordering</A> of its elements.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(java.lang.Object[], int, int)">sort</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of objects into ascending order, 
      according to the <A title="interface in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
      ordering</A> of its elements.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(short[])">sort</A></B>(short[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of shorts into ascending numerical order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(short[], int, int)">sort</A></B>(short[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of shorts into ascending numerical 
      order.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; 
        void</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(T[], java.util.Comparator)">sort</A></B>(T[]&nbsp;a, 
      <A title="interface in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? 
      super T&gt;&nbsp;c)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified array of objects according to the order induced by the specified 
      comparator.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static 
      <TABLE border=0 cellSpacing=0 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=right>
          <TD noWrap><FONT size=-1><CODE>&lt;T&gt; 
        void</CODE></FONT></TD></TR></TBODY></TABLE></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(T[], int, int, java.util.Comparator)">sort</A></B>(T[]&nbsp;a, 
      int&nbsp;fromIndex, int&nbsp;toIndex, <A title="interface in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? 
      super T&gt;&nbsp;c)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sorts the 
      specified range of the specified array of objects according to the order 
      induced by the specified comparator.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(boolean[])">toString</A></B>(boolean[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(byte[])">toString</A></B>(byte[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(char[])">toString</A></B>(char[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(double[])">toString</A></B>(double[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(float[])">toString</A></B>(float[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(int[])">toString</A></B>(int[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(long[])">toString</A></B>(long[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(java.lang.Object[])">toString</A></B>(<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified array.</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>static&nbsp;<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A></CODE></FONT></TD>
    <TD><CODE><B><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(short[])">toString</A></B>(short[]&nbsp;a)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a 
      string representation of the contents of the specified 
array.</TD></TR></TBODY></TABLE>&nbsp;<A 
name=methods_inherited_from_class_java.lang.Object><!-- --></A> 
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableSubHeadingColor bgColor=#eeeeff>
    <TH align=left><B>Methods inherited from class java.lang.<A 
      title="class in java.lang" 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A></B></TH></TR>
  <TR class=TableRowColor bgColor=white>
    <TD><CODE><A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#clone()">clone</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#equals(java.lang.Object)">equals</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#finalize()">finalize</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#getClass()">getClass</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#hashCode()">hashCode</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notify()">notify</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notifyAll()">notifyAll</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#toString()">toString</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait()">wait</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait(long)">wait</A>, 
      <A 
      href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait(long, int)">wait</A></CODE></TD></TR></TBODY></TABLE>&nbsp; 

<P><!-- ============ METHOD DETAIL ========== --><A 
name=method_detail><!-- --></A></P>
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=1 align=left><FONT size=+2><B>Method 
  Detail</B></FONT></TH></TR></TBODY></TABLE><A name=sort(long[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(long[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of longs into ascending numerical order. The 
  sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
  Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(long[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(long[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of longs into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.) 
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(int[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(int[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of ints into ascending numerical order. The 
  sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
  Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(int[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(int[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of ints into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.)
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(short[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(short[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of shorts into ascending numerical order. The 
  sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
  Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(short[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(short[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of shorts into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.)
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(char[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(char[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of chars into ascending numerical order. The 
  sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
  Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(char[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(char[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of chars into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.)
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(byte[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(byte[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of bytes into ascending numerical order. The 
  sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. 
  Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(byte[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(byte[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of bytes into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.)
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(double[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(double[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of doubles into ascending numerical order. 
  <P>The <CODE>&lt;</CODE> relation does not provide a total order on all 
  floating-point values; although they are distinct numbers <CODE>-0.0 == 
  0.0</CODE> is <CODE>true</CODE> and a NaN value compares neither less than, 
  greater than, nor equal to any floating-point value, even itself. To allow the 
  sort to proceed, instead of using the <CODE>&lt;</CODE> relation to determine 
  ascending numerical order, this method uses the total order imposed by <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#compareTo(java.lang.Double)"><CODE>Double.compareTo(java.lang.Double)</CODE></A>. 
  This ordering differs from the <CODE>&lt;</CODE> relation in that 
  <CODE>-0.0</CODE> is treated as less than <CODE>0.0</CODE> and NaN is 
  considered greater than any other floating-point value. For the purposes of 
  sorting, all NaN values are considered equivalent and equal. 
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(double[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(double[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of doubles into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.) 
  <P>The <CODE>&lt;</CODE> relation does not provide a total order on all 
  floating-point values; although they are distinct numbers <CODE>-0.0 == 
  0.0</CODE> is <CODE>true</CODE> and a NaN value compares neither less than, 
  greater than, nor equal to any floating-point value, even itself. To allow the 
  sort to proceed, instead of using the <CODE>&lt;</CODE> relation to determine 
  ascending numerical order, this method uses the total order imposed by <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#compareTo(java.lang.Double)"><CODE>Double.compareTo(java.lang.Double)</CODE></A>. 
  This ordering differs from the <CODE>&lt;</CODE> relation in that 
  <CODE>-0.0</CODE> is treated as less than <CODE>0.0</CODE> and NaN is 
  considered greater than any other floating-point value. For the purposes of 
  sorting, all NaN values are considered equivalent and equal. 
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(float[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(float[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of floats into ascending numerical order. 
  <P>The <CODE>&lt;</CODE> relation does not provide a total order on all 
  floating-point values; although they are distinct numbers <CODE>-0.0f == 
  0.0f</CODE> is <CODE>true</CODE> and a NaN value compares neither less than, 
  greater than, nor equal to any floating-point value, even itself. To allow the 
  sort to proceed, instead of using the <CODE>&lt;</CODE> relation to determine 
  ascending numerical order, this method uses the total order imposed by <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Float.html#compareTo(java.lang.Float)"><CODE>Float.compareTo(java.lang.Float)</CODE></A>. 
  This ordering differs from the <CODE>&lt;</CODE> relation in that 
  <CODE>-0.0f</CODE> is treated as less than <CODE>0.0f</CODE> and NaN is 
  considered greater than any other floating-point value. For the purposes of 
  sorting, all NaN values are considered equivalent and equal. 
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted</DD></DL></DD></DL>
<HR>
<A name="sort(float[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(float[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of floats into ascending 
  numerical order. The range to be sorted extends from index <TT>fromIndex</TT>, 
  inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.) 
  <P>The <CODE>&lt;</CODE> relation does not provide a total order on all 
  floating-point values; although they are distinct numbers <CODE>-0.0f == 
  0.0f</CODE> is <CODE>true</CODE> and a NaN value compares neither less than, 
  greater than, nor equal to any floating-point value, even itself. To allow the 
  sort to proceed, instead of using the <CODE>&lt;</CODE> relation to determine 
  ascending numerical order, this method uses the total order imposed by <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Float.html#compareTo(java.lang.Float)"><CODE>Float.compareTo(java.lang.Float)</CODE></A>. 
  This ordering differs from the <CODE>&lt;</CODE> relation in that 
  <CODE>-0.0f</CODE> is treated as less than <CODE>0.0f</CODE> and NaN is 
  considered greater than any other floating-point value. For the purposes of 
  sorting, all NaN values are considered equivalent and equal. 
  <P>The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and 
  M. Douglas McIlroy's "Engineering a Sort Function", Software-Practice and 
  Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers 
  n*log(n) performance on many data sets that cause other quicksorts to degrade 
  to quadratic performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name=sort(java.lang.Object[])><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</PRE>
<DL>
  <DD>Sorts the specified array of objects into ascending order, according to 
  the <A title="interface in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
  ordering</A> of its elements. All elements in the array must implement the <A 
  title="interface in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html"><CODE>Comparable</CODE></A> 
  interface. Furthermore, all elements in the array must be <I>mutually 
  comparable</I> (that is, <TT>e1.compareTo(e2)</TT> must not throw a 
  <TT>ClassCastException</TT> for any elements <TT>e1</TT> and <TT>e2</TT> in 
  the array).
  <P>This sort is guaranteed to be <I>stable</I>: equal elements will not be 
  reordered as a result of the sort.
  <P>The sorting algorithm is a modified mergesort (in which the merge is 
  omitted if the highest element in the low sublist is less than the lowest 
  element in the high sublist). This algorithm offers guaranteed n*log(n) 
  performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the array contains elements that are not <I>mutually comparable</I> 
    (for example, strings and integers).</DD></DL></DD></DL>
<HR>
<A name="sort(java.lang.Object[], int, int)"><!-- --></A>
<H3>sort</H3><PRE>public static void <B>sort</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of objects into ascending 
  order, according to the <A title="interface in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
  ordering</A> of its elements. The range to be sorted extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.) All elements in 
  this range must implement the <A title="interface in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html"><CODE>Comparable</CODE></A> 
  interface. Furthermore, all elements in this range must be <I>mutually 
  comparable</I> (that is, <TT>e1.compareTo(e2)</TT> must not throw a 
  <TT>ClassCastException</TT> for any elements <TT>e1</TT> and <TT>e2</TT> in 
  the array).
  <P>This sort is guaranteed to be <I>stable</I>: equal elements will not be 
  reordered as a result of the sort.
  <P>The sorting algorithm is a modified mergesort (in which the merge is 
  omitted if the highest element in the low sublist is less than the lowest 
  element in the high sublist). This algorithm offers guaranteed n*log(n) 
  performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; a.length</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the array contains elements that are not <I>mutually comparable</I> 
    (for example, strings and integers).</DD></DL></DD></DL>
<HR>
<A name=sort(java.lang.Object[],java.util.Comparator)><!-- --></A><A 
name="sort(T[], java.util.Comparator)"><!-- --></A>
<H3>sort</H3><PRE>public static &lt;T&gt; void <B>sort</B>(T[]&nbsp;a,
                            <A title="interface in java.util" href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? super T&gt;&nbsp;c)</PRE>
<DL>
  <DD>Sorts the specified array of objects according to the order induced by the 
  specified comparator. All elements in the array must be <I>mutually 
  comparable</I> by the specified comparator (that is, <TT>c.compare(e1, 
  e2)</TT> must not throw a <TT>ClassCastException</TT> for any elements 
  <TT>e1</TT> and <TT>e2</TT> in the array).
  <P>This sort is guaranteed to be <I>stable</I>: equal elements will not be 
  reordered as a result of the sort.
  <P>The sorting algorithm is a modified mergesort (in which the merge is 
  omitted if the highest element in the low sublist is less than the lowest 
  element in the high sublist). This algorithm offers guaranteed n*log(n) 
  performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>c</CODE> - the comparator to determine the order of the array. A 
    <TT>null</TT> value indicates that the elements' <A 
    title="interface in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
    ordering</A> should be used. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the array contains elements that are not <I>mutually comparable</I> 
    using the specified comparator.</DD></DL></DD></DL>
<HR>
<A name=sort(java.lang.Object[],int,int,java.util.Comparator)><!-- --></A><A 
name="sort(T[], int, int, java.util.Comparator)"><!-- --></A>
<H3>sort</H3><PRE>public static &lt;T&gt; void <B>sort</B>(T[]&nbsp;a,
                            int&nbsp;fromIndex,
                            int&nbsp;toIndex,
                            <A title="interface in java.util" href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? super T&gt;&nbsp;c)</PRE>
<DL>
  <DD>Sorts the specified range of the specified array of objects according to 
  the order induced by the specified comparator. The range to be sorted extends 
  from index <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, 
  exclusive. (If <TT>fromIndex==toIndex</TT>, the range to be sorted is empty.) 
  All elements in the range must be <I>mutually comparable</I> by the specified 
  comparator (that is, <TT>c.compare(e1, e2)</TT> must not throw a 
  <TT>ClassCastException</TT> for any elements <TT>e1</TT> and <TT>e2</TT> in 
  the range).
  <P>This sort is guaranteed to be <I>stable</I>: equal elements will not be 
  reordered as a result of the sort.
  <P>The sorting algorithm is a modified mergesort (in which the merge is 
  omitted if the highest element in the low sublist is less than the lowest 
  element in the high sublist). This algorithm offers guaranteed n*log(n) 
  performance. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be sorted
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be sorted
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    sorted
    <DD><CODE>c</CODE> - the comparator to determine the order of the array. A 
    <TT>null</TT> value indicates that the elements' <A 
    title="interface in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
    ordering</A> should be used. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the array contains elements that are not <I>mutually comparable</I> 
    using the specified comparator. 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="binarySearch(long[], long)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(long[]&nbsp;a,
                               long&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of longs for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(long[])"><CODE>sort(long[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(long[], int, int, long)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(long[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               long&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of longs for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(long[], int, int)"><CODE>sort(long[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(int[], int)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(int[]&nbsp;a,
                               int&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of ints for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(int[])"><CODE>sort(int[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(int[], int, int, int)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(int[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               int&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of ints for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(int[], int, int)"><CODE>sort(int[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(short[], short)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(short[]&nbsp;a,
                               short&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of shorts for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(short[])"><CODE>sort(short[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(short[], int, int, short)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(short[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               short&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of shorts for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(short[], int, int)"><CODE>sort(short[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(char[], char)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(char[]&nbsp;a,
                               char&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of chars for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(char[])"><CODE>sort(char[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(char[], int, int, char)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(char[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               char&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of chars for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(char[], int, int)"><CODE>sort(char[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(byte[], byte)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(byte[]&nbsp;a,
                               byte&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of bytes for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(byte[])"><CODE>sort(byte[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(byte[], int, int, byte)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(byte[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               byte&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of bytes for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(byte[], int, int)"><CODE>sort(byte[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(double[], double)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(double[]&nbsp;a,
                               double&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of doubles for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(double[])"><CODE>sort(double[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. This method considers all NaN 
  values to be equivalent and equal. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(double[], int, int, double)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(double[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               double&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of doubles for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(double[], int, int)"><CODE>sort(double[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. This method 
  considers all NaN values to be equivalent and equal. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(float[], float)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(float[]&nbsp;a,
                               float&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array of floats for the specified value using the 
  binary search algorithm. The array must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(float[])"><CODE>sort(float[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. If the array contains multiple elements with the specified value, 
  there is no guarantee which one will be found. This method considers all NaN 
  values to be equivalent and equal. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found.</DD></DL></DD></DL>
<HR>
<A name="binarySearch(float[], int, int, float)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(float[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               float&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array of floats for the specified value 
  using the binary search algorithm. The range must be sorted (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(float[], int, int)"><CODE>sort(float[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the range contains multiple elements with the 
  specified value, there is no guarantee which one will be found. This method 
  considers all NaN values to be equivalent and equal. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="binarySearch(java.lang.Object[], java.lang.Object)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a,
                               <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;key)</PRE>
<DL>
  <DD>Searches the specified array for the specified object using the binary 
  search algorithm. The array must be sorted into ascending order according to 
  the <A title="interface in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
  ordering</A> of its elements (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(java.lang.Object[])"><CODE>sort(Object[])</CODE></A> 
  method) prior to making this call. If it is not sorted, the results are 
  undefined. (If the array contains elements that are not mutually comparable 
  (for example, strings and integers), it <I>cannot</I> be sorted according to 
  the natural ordering of its elements, hence results are undefined.) If the 
  array contains multiple elements equal to the specified object, there is no 
  guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the search key is not comparable to the elements of the 
  array.</DD></DL></DD></DL>
<HR>
<A 
name="binarySearch(java.lang.Object[], int, int, java.lang.Object)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static int <B>binarySearch</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a,
                               int&nbsp;fromIndex,
                               int&nbsp;toIndex,
                               <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;key)</PRE>
<DL>
  <DD>Searches a range of the specified array for the specified object using the 
  binary search algorithm. The range must be sorted into ascending order 
  according to the <A title="interface in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
  ordering</A> of its elements (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(java.lang.Object[], int, int)"><CODE>sort(Object[], 
  int, int)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. (If the range contains elements that are not 
  mutually comparable (for example, strings and integers), it <I>cannot</I> be 
  sorted according to the natural ordering of its elements, hence results are 
  undefined.) If the range contains multiple elements equal to the specified 
  object, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the search key is not comparable to the elements of the array within 
    the specified range. 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name=binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)><!-- --></A><A 
name="binarySearch(T[], T, java.util.Comparator)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static &lt;T&gt; int <B>binarySearch</B>(T[]&nbsp;a,
                                   T&nbsp;key,
                                   <A title="interface in java.util" href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? super T&gt;&nbsp;c)</PRE>
<DL>
  <DD>Searches the specified array for the specified object using the binary 
  search algorithm. The array must be sorted into ascending order according to 
  the specified comparator (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(T[], java.util.Comparator)"><CODE>sort(T[], 
  Comparator)</CODE></A> method) prior to making this call. If it is not sorted, 
  the results are undefined. If the array contains multiple elements equal to 
  the specified object, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>key</CODE> - the value to be searched for
    <DD><CODE>c</CODE> - the comparator by which the array is ordered. A 
    <TT>null</TT> value indicates that the elements' <A 
    title="interface in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
    ordering</A> should be used. 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array; otherwise, 
    <TT>(-(<I>insertion point</I>) - 1)</TT>. The <I>insertion point</I> is 
    defined as the point at which the key would be inserted into the array: the 
    index of the first element greater than the key, or <TT>a.length</TT> if all 
    elements in the array are less than the specified key. Note that this 
    guarantees that the return value will be &gt;= 0 if and only if the key is 
    found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the array contains elements that are not <I>mutually comparable</I> 
    using the specified comparator, or the search key is not comparable to the 
    elements of the array using this comparator.</DD></DL></DD></DL>
<HR>
<A 
name=binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)><!-- --></A><A 
name="binarySearch(T[], int, int, T, java.util.Comparator)"><!-- --></A>
<H3>binarySearch</H3><PRE>public static &lt;T&gt; int <B>binarySearch</B>(T[]&nbsp;a,
                                   int&nbsp;fromIndex,
                                   int&nbsp;toIndex,
                                   T&nbsp;key,
                                   <A title="interface in java.util" href="http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html">Comparator</A>&lt;? super T&gt;&nbsp;c)</PRE>
<DL>
  <DD>Searches a range of the specified array for the specified object using the 
  binary search algorithm. The range must be sorted into ascending order 
  according to the specified comparator (as by the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort(T[], int, int, java.util.Comparator)"><CODE>sort(T[], 
  int, int, Comparator)</CODE></A> method) prior to making this call. If it is 
  not sorted, the results are undefined. If the range contains multiple elements 
  equal to the specified object, there is no guarantee which one will be found. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be searched
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be searched
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    searched
    <DD><CODE>key</CODE> - the value to be searched for
    <DD><CODE>c</CODE> - the comparator by which the array is ordered. A 
    <TT>null</TT> value indicates that the elements' <A 
    title="interface in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html">natural 
    ordering</A> should be used. 
    <DT><B>Returns:</B>
    <DD>index of the search key, if it is contained in the array within the 
    specified range; otherwise, <TT>(-(<I>insertion point</I>) - 1)</TT>. The 
    <I>insertion point</I> is defined as the point at which the key would be 
    inserted into the array: the index of the first element in the range greater 
    than the key, or <TT>toIndex</TT> if all elements in the range are less than 
    the specified key. Note that this guarantees that the return value will be 
    &gt;= 0 if and only if the key is found. 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ClassCastException.html">ClassCastException</A></CODE> 
    - if the range contains elements that are not <I>mutually comparable</I> 
    using the specified comparator, or the search key is not comparable to the 
    elements in the range using this comparator. 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <CODE>fromIndex &gt; toIndex</CODE> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <CODE>fromIndex &lt; 0 or toIndex &gt; a.length</CODE>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="equals(long[], long[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(long[]&nbsp;a,
                             long[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of longs are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="equals(int[], int[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(int[]&nbsp;a,
                             int[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of ints are <I>equal</I> 
  to one another. Two arrays are considered equal if both arrays contain the 
  same number of elements, and all corresponding pairs of elements in the two 
  arrays are equal. In other words, two arrays are equal if they contain the 
  same elements in the same order. Also, two array references are considered 
  equal if both are <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="equals(short[], short[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(short[]&nbsp;a,
                             short[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of shorts are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="equals(char[], char[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(char[]&nbsp;a,
                             char[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of chars are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="equals(byte[], byte[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(byte[]&nbsp;a,
                             byte[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of bytes are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="equals(boolean[], boolean[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(boolean[]&nbsp;a,
                             boolean[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of booleans are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="equals(double[], double[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(double[]&nbsp;a,
                             double[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of doubles are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>Two doubles <TT>d1</TT> and <TT>d2</TT> are considered equal if: <PRE>    <TT>new Double(d1).equals(new Double(d2))</TT></PRE>(Unlike the 
  <TT>==</TT> operator, this method considers <TT>NaN</TT> equals to itself, and 
  0.0d unequal to -0.0d.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html#equals(java.lang.Object)"><CODE>Double.equals(Object)</CODE></A></DD></DL></DD></DL>
<HR>
<A name="equals(float[], float[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(float[]&nbsp;a,
                             float[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of floats are 
  <I>equal</I> to one another. Two arrays are considered equal if both arrays 
  contain the same number of elements, and all corresponding pairs of elements 
  in the two arrays are equal. In other words, two arrays are equal if they 
  contain the same elements in the same order. Also, two array references are 
  considered equal if both are <TT>null</TT>.
  <P>Two floats <TT>f1</TT> and <TT>f2</TT> are considered equal if: <PRE>    <TT>new Float(f1).equals(new Float(f2))</TT></PRE>(Unlike the 
  <TT>==</TT> operator, this method considers <TT>NaN</TT> equals to itself, and 
  0.0f unequal to -0.0f.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/Float.html#equals(java.lang.Object)"><CODE>Float.equals(Object)</CODE></A></DD></DL></DD></DL>
<HR>
<A name="equals(java.lang.Object[], java.lang.Object[])"><!-- --></A>
<H3>equals</H3><PRE>public static boolean <B>equals</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a,
                             <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays of Objects are 
  <I>equal</I> to one another. The two arrays are considered equal if both 
  arrays contain the same number of elements, and all corresponding pairs of 
  elements in the two arrays are equal. Two objects <TT>e1</TT> and <TT>e2</TT> 
  are considered <I>equal</I> if <TT>(e1==null ? e2==null : e1.equals(e2))</TT>. 
  In other words, the two arrays are equal if they contain the same elements in 
  the same order. Also, two array references are considered equal if both are 
  <TT>null</TT>.
  <P>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal</DD></DL></DD></DL>
<HR>
<A name="fill(long[], long)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(long[]&nbsp;a,
                        long&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified long value to each element of the specified array of 
  longs. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(long[], int, int, long)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(long[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        long&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified long value to each element of the specified range of 
  the specified array of longs. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(int[], int)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(int[]&nbsp;a,
                        int&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified int value to each element of the specified array of 
  ints. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(int[], int, int, int)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(int[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        int&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified int value to each element of the specified range of 
  the specified array of ints. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(short[], short)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(short[]&nbsp;a,
                        short&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified short value to each element of the specified array 
  of shorts. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(short[], int, int, short)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(short[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        short&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified short value to each element of the specified range 
  of the specified array of shorts. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(char[], char)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(char[]&nbsp;a,
                        char&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified char value to each element of the specified array of 
  chars. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(char[], int, int, char)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(char[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        char&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified char value to each element of the specified range of 
  the specified array of chars. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(byte[], byte)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(byte[]&nbsp;a,
                        byte&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified byte value to each element of the specified array of 
  bytes. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(byte[], int, int, byte)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(byte[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        byte&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified byte value to each element of the specified range of 
  the specified array of bytes. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(boolean[], boolean)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(boolean[]&nbsp;a,
                        boolean&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified boolean value to each element of the specified array 
  of booleans. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(boolean[], int, int, boolean)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(boolean[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        boolean&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified boolean value to each element of the specified range 
  of the specified array of booleans. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(double[], double)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(double[]&nbsp;a,
                        double&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified double value to each element of the specified array 
  of doubles. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(double[], int, int, double)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(double[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        double&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified double value to each element of the specified range 
  of the specified array of doubles. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(float[], float)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(float[]&nbsp;a,
                        float&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified float value to each element of the specified array 
  of floats. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the 
    array</DD></DL></DD></DL>
<HR>
<A name="fill(float[], int, int, float)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(float[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        float&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified float value to each element of the specified range 
  of the specified array of floats. The range to be filled extends from index 
  <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; 
a.length</TT></DD></DL></DD></DL>
<HR>
<A name="fill(java.lang.Object[], java.lang.Object)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a,
                        <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified Object reference to each element of the specified 
  array of Objects. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayStoreException.html">ArrayStoreException</A></CODE> 
    - if the specified value is not of a runtime type that can be stored in the 
    specified array</DD></DL></DD></DL>
<HR>
<A name="fill(java.lang.Object[], int, int, java.lang.Object)"><!-- --></A>
<H3>fill</H3><PRE>public static void <B>fill</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a,
                        int&nbsp;fromIndex,
                        int&nbsp;toIndex,
                        <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>&nbsp;val)</PRE>
<DL>
  <DD>Assigns the specified Object reference to each element of the specified 
  range of the specified array of Objects. The range to be filled extends from 
  index <TT>fromIndex</TT>, inclusive, to index <TT>toIndex</TT>, exclusive. (If 
  <TT>fromIndex==toIndex</TT>, the range to be filled is empty.) 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array to be filled
    <DD><CODE>fromIndex</CODE> - the index of the first element (inclusive) to 
    be filled with the specified value
    <DD><CODE>toIndex</CODE> - the index of the last element (exclusive) to be 
    filled with the specified value
    <DD><CODE>val</CODE> - the value to be stored in all elements of the array 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>fromIndex &gt; toIndex</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>fromIndex &lt; 0</TT> or <TT>toIndex &gt; a.length</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayStoreException.html">ArrayStoreException</A></CODE> 
    - if the specified value is not of a runtime type that can be stored in the 
    specified array</DD></DL></DD></DL>
<HR>
<A name=copyOf(java.lang.Object[],int)><!-- --></A><A name="copyOf(T[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static &lt;T&gt; T[] <B>copyOf</B>(T[]&nbsp;original,
                             int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with nulls (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>null</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. The 
  resulting array is of exactly the same class as the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with nulls to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name=copyOf(java.lang.Object[],int,java.lang.Class)><!-- --></A><A 
name="copyOf(U[], int, java.lang.Class)"><!-- --></A>
<H3>copyOf</H3><PRE>public static &lt;T,U&gt; T[] <B>copyOf</B>(U[]&nbsp;original,
                               int&nbsp;newLength,
                               <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html">Class</A>&lt;? extends T[]&gt;&nbsp;newType)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with nulls (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>null</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. The 
  resulting array is of the class <TT>newType</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned
    <DD><CODE>newType</CODE> - the class of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with nulls to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayStoreException.html">ArrayStoreException</A></CODE> 
    - if an element copied from <TT>original</TT> is not of a runtime type that 
    can be stored in an array of class <TT>newType</TT>
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(byte[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static byte[] <B>copyOf</B>(byte[]&nbsp;original,
                            int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with zeros (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>(byte)0</TT>. Such indices will exist if 
  and only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with zeros to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(short[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static short[] <B>copyOf</B>(short[]&nbsp;original,
                             int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with zeros (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>(short)0</TT>. Such indices will exist if 
  and only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with zeros to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(int[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static int[] <B>copyOf</B>(int[]&nbsp;original,
                           int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with zeros (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>0</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with zeros to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(long[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static long[] <B>copyOf</B>(long[]&nbsp;original,
                            int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with zeros (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>0L</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with zeros to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(char[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static char[] <B>copyOf</B>(char[]&nbsp;original,
                            int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with null characters (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>'\\u000'</TT>. Such indices will exist if 
  and only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with null characters 
    to obtain the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(float[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static float[] <B>copyOf</B>(float[]&nbsp;original,
                             int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with zeros (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>0f</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with zeros to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(double[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static double[] <B>copyOf</B>(double[]&nbsp;original,
                              int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with zeros (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>0d</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with zeros to obtain 
    the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOf(boolean[], int)"><!-- --></A>
<H3>copyOf</H3><PRE>public static boolean[] <B>copyOf</B>(boolean[]&nbsp;original,
                               int&nbsp;newLength)</PRE>
<DL>
  <DD>Copies the specified array, truncating or padding with <TT>false</TT> (if 
  necessary) so the copy has the specified length. For all indices that are 
  valid in both the original array and the copy, the two arrays will contain 
  identical values. For any indices that are valid in the copy but not the 
  original, the copy will contain <TT>false</TT>. Such indices will exist if and 
  only if the specified length is greater than that of the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array to be copied
    <DD><CODE>newLength</CODE> - the length of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a copy of the original array, truncated or padded with false elements to 
    obtain the specified length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NegativeArraySizeException.html">NegativeArraySizeException</A></CODE> 
    - if <TT>newLength</TT> is negative 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name=copyOfRange(java.lang.Object[],int,int)><!-- --></A><A 
name="copyOfRange(T[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static &lt;T&gt; T[] <B>copyOfRange</B>(T[]&nbsp;original,
                                  int&nbsp;from,
                                  int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>null</TT> is placed in all elements of the copy whose index is greater 
  than or equal to <TT>original.length - from</TT>. The length of the returned 
  array will be <TT>to - from</TT>. 
  <P>The resulting array is of exactly the same class as the original array. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with nulls to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name=copyOfRange(java.lang.Object[],int,int,java.lang.Class)><!-- --></A><A 
name="copyOfRange(U[], int, int, java.lang.Class)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static &lt;T,U&gt; T[] <B>copyOfRange</B>(U[]&nbsp;original,
                                    int&nbsp;from,
                                    int&nbsp;to,
                                    <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Class.html">Class</A>&lt;? extends T[]&gt;&nbsp;newType)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>null</TT> is placed in all elements of the copy whose index is greater 
  than or equal to <TT>original.length - from</TT>. The length of the returned 
  array will be <TT>to - from</TT>. The resulting array is of the class 
  <TT>newType</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.)
    <DD><CODE>newType</CODE> - the class of the copy to be returned 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with nulls to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayStoreException.html">ArrayStoreException</A></CODE> 
    - if an element copied from <TT>original</TT> is not of a runtime type that 
    can be stored in an array of class <TT>newType</TT>.
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(byte[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static byte[] <B>copyOfRange</B>(byte[]&nbsp;original,
                                 int&nbsp;from,
                                 int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>(byte)0</TT> is placed in all elements of the copy whose index is greater 
  than or equal to <TT>original.length - from</TT>. The length of the returned 
  array will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with zeros to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(short[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static short[] <B>copyOfRange</B>(short[]&nbsp;original,
                                  int&nbsp;from,
                                  int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>(short)0</TT> is placed in all elements of the copy whose index is greater 
  than or equal to <TT>original.length - from</TT>. The length of the returned 
  array will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with zeros to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(int[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static int[] <B>copyOfRange</B>(int[]&nbsp;original,
                                int&nbsp;from,
                                int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>0</TT> is placed in all elements of the copy whose index is greater than 
  or equal to <TT>original.length - from</TT>. The length of the returned array 
  will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with zeros to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(long[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static long[] <B>copyOfRange</B>(long[]&nbsp;original,
                                 int&nbsp;from,
                                 int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>0L</TT> is placed in all elements of the copy whose index is greater than 
  or equal to <TT>original.length - from</TT>. The length of the returned array 
  will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with zeros to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(char[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static char[] <B>copyOfRange</B>(char[]&nbsp;original,
                                 int&nbsp;from,
                                 int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>'\\u000'</TT> is placed in all elements of the copy whose index is greater 
  than or equal to <TT>original.length - from</TT>. The length of the returned 
  array will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with null characters to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(float[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static float[] <B>copyOfRange</B>(float[]&nbsp;original,
                                  int&nbsp;from,
                                  int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>0f</TT> is placed in all elements of the copy whose index is greater than 
  or equal to <TT>original.length - from</TT>. The length of the returned array 
  will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with zeros to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(double[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static double[] <B>copyOfRange</B>(double[]&nbsp;original,
                                   int&nbsp;from,
                                   int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>0d</TT> is placed in all elements of the copy whose index is greater than 
  or equal to <TT>original.length - from</TT>. The length of the returned array 
  will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with zeros to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name="copyOfRange(boolean[], int, int)"><!-- --></A>
<H3>copyOfRange</H3><PRE>public static boolean[] <B>copyOfRange</B>(boolean[]&nbsp;original,
                                    int&nbsp;from,
                                    int&nbsp;to)</PRE>
<DL>
  <DD>Copies the specified range of the specified array into a new array. The 
  initial index of the range (<TT>from</TT>) must lie between zero and 
  <TT>original.length</TT>, inclusive. The value at <TT>original[from]</TT> is 
  placed into the initial element of the copy (unless <TT>from == 
  original.length</TT> or <TT>from == to</TT>). Values from subsequent elements 
  in the original array are placed into subsequent elements in the copy. The 
  final index of the range (<TT>to</TT>), which must be greater than or equal to 
  <TT>from</TT>, may be greater than <TT>original.length</TT>, in which case 
  <TT>false</TT> is placed in all elements of the copy whose index is greater 
  than or equal to <TT>original.length - from</TT>. The length of the returned 
  array will be <TT>to - from</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>original</CODE> - the array from which a range is to be copied
    <DD><CODE>from</CODE> - the initial index of the range to be copied, 
    inclusive
    <DD><CODE>to</CODE> - the final index of the range to be copied, exclusive. 
    (This index may lie outside the array.) 
    <DT><B>Returns:</B>
    <DD>a new array containing the specified range from the original array, 
    truncated or padded with false elements to obtain the required length 
    <DT><B>Throws:</B> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">ArrayIndexOutOfBoundsException</A></CODE> 
    - if <TT>from &lt; 0</TT> or <TT>from &gt; original.length()</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/IllegalArgumentException.html">IllegalArgumentException</A></CODE> 
    - if <TT>from &gt; to</TT> 
    <DD><CODE><A title="class in java.lang" 
    href="http://docs.oracle.com/javase/6/docs/api/java/lang/NullPointerException.html">NullPointerException</A></CODE> 
    - if <TT>original</TT> is null
    <DT><B>Since:</B></DT>
    <DD>1.6</DD></DL></DD></DL>
<HR>
<A name=asList(java.lang.Object[])><!-- --></A><A name=asList(T...)><!-- --></A>
<H3>asList</H3><PRE>public static &lt;T&gt; <A title="interface in java.util" href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html">List</A>&lt;T&gt; <B>asList</B>(T...&nbsp;a)</PRE>
<DL>
  <DD>Returns a fixed-size list backed by the specified array. (Changes to the 
  returned list "write through" to the array.) This method acts as bridge 
  between array-based and collection-based APIs, in combination with <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Collection.html#toArray()"><CODE>Collection.toArray()</CODE></A>. 
  The returned list is serializable and implements <A 
  title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/RandomAccess.html"><CODE>RandomAccess</CODE></A>. 

  <P>This method also provides a convenient way to create a fixed-size list 
  initialized to contain several elements: <PRE>     List&lt;String&gt; stooges = Arrays.asList("Larry", "Moe", "Curly");
 </PRE>
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array by which the list will be backed 
    <DT><B>Returns:</B>
    <DD>a list view of the specified array</DD></DL></DD></DL>
<HR>
<A name=hashCode(long[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(long[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>long</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Long.html"><CODE>Long</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(int[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(int[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two non-null <TT>int</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html"><CODE>Integer</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(short[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(short[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>short</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Short.html"><CODE>Short</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(char[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(char[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>char</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html"><CODE>Character</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(byte[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(byte[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>byte</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Byte.html"><CODE>Byte</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(boolean[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(boolean[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>boolean</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Boolean.html"><CODE>Boolean</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(float[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(float[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>float</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Float.html"><CODE>Float</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(double[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(double[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. For any 
  two <TT>double</TT> arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.equals(a, b)</TT>, it is also the case that <TT>Arrays.hashCode(a) 
  == Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is the same value that would be obtained 
  by invoking the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE><TT>hashCode</TT></CODE></A> 
  method on a <A title="interface in java.util" 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html"><CODE>List</CODE></A> 
  containing a sequence of <A title="class in java.lang" 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Double.html"><CODE>Double</CODE></A> 
  instances representing the elements of <TT>a</TT> in the same order. If 
  <TT>a</TT> is <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose hash value to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=hashCode(java.lang.Object[])><!-- --></A>
<H3>hashCode</H3><PRE>public static int <B>hashCode</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the contents of the specified array. If the 
  array contains other arrays as elements, the hash code is based on their 
  identities rather than their contents. It is therefore acceptable to invoke 
  this method on an array that contains itself as an element, either directly or 
  indirectly through one or more levels of arrays. 
  <P>For any two arrays <TT>a</TT> and <TT>b</TT> such that <TT>Arrays.equals(a, 
  b)</TT>, it is also the case that <TT>Arrays.hashCode(a) == 
  Arrays.hashCode(b)</TT>. 
  <P>The value returned by this method is equal to the value that would be 
  returned by <TT>Arrays.asList(a).hashCode()</TT>, unless <TT>a</TT> is 
  <TT>null</TT>, in which case <TT>0</TT> is returned. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose content-based hash code to compute 
    <DT><B>Returns:</B>
    <DD>a content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD>
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepHashCode(java.lang.Object[])"><CODE>deepHashCode(Object[])</CODE></A></DD></DL></DD></DL>
<HR>
<A name=deepHashCode(java.lang.Object[])><!-- --></A>
<H3>deepHashCode</H3><PRE>public static int <B>deepHashCode</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a hash code based on the "deep contents" of the specified array. 
  If the array contains other arrays as elements, the hash code is based on 
  their contents and so on, ad infinitum. It is therefore unacceptable to invoke 
  this method on an array that contains itself as an element, either directly or 
  indirectly through one or more levels of arrays. The behavior of such an 
  invocation is undefined. 
  <P>For any two arrays <TT>a</TT> and <TT>b</TT> such that 
  <TT>Arrays.deepEquals(a, b)</TT>, it is also the case that 
  <TT>Arrays.deepHashCode(a) == Arrays.deepHashCode(b)</TT>. 
  <P>The computation of the value returned by this method is similar to that of 
  the value returned by <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/List.html#hashCode()"><CODE>List.hashCode()</CODE></A> 
  on a list containing the same elements as <TT>a</TT> in the same order, with 
  one difference: If an element <TT>e</TT> of <TT>a</TT> is itself an array, its 
  hash code is computed not by calling <TT>e.hashCode()</TT>, but as by calling 
  the appropriate overloading of <TT>Arrays.hashCode(e)</TT> if <TT>e</TT> is an 
  array of a primitive type, or as by calling <TT>Arrays.deepHashCode(e)</TT> 
  recursively if <TT>e</TT> is an array of a reference type. If <TT>a</TT> is 
  <TT>null</TT>, this method returns 0. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose deep-content-based hash code to compute 

    <DT><B>Returns:</B>
    <DD>a deep-content-based hash code for <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD>
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode(java.lang.Object[])"><CODE>hashCode(Object[])</CODE></A></DD></DL></DD></DL>
<HR>
<A name="deepEquals(java.lang.Object[], java.lang.Object[])"><!-- --></A>
<H3>deepEquals</H3><PRE>public static boolean <B>deepEquals</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a1,
                                 <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a2)</PRE>
<DL>
  <DD>Returns <TT>true</TT> if the two specified arrays are <I>deeply equal</I> 
  to one another. Unlike the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(java.lang.Object[], java.lang.Object[])"><CODE>equals(Object[],Object[])</CODE></A> 
  method, this method is appropriate for use with nested arrays of arbitrary 
  depth. 
  <P>Two array references are considered deeply equal if both are <TT>null</TT>, 
  or if they refer to arrays that contain the same number of elements and all 
  corresponding pairs of elements in the two arrays are deeply equal. 
  <P>Two possibly <TT>null</TT> elements <TT>e1</TT> and <TT>e2</TT> are deeply 
  equal if any of the following conditions hold: 
  <UL>
    <LI><TT>e1</TT> and <TT>e2</TT> are both arrays of object reference types, 
    and <TT>Arrays.deepEquals(e1, e2) would return true</TT> 
    <LI><TT>e1</TT> and <TT>e2</TT> are arrays of the same primitive type, and 
    the appropriate overloading of <TT>Arrays.equals(e1, e2)</TT> would return 
    true. 
    <LI><TT>e1 == e2</TT> 
    <LI><TT>e1.equals(e2)</TT> would return true. </LI></UL>Note that this 
  definition permits <TT>null</TT> elements at any depth. 
  <P>If either of the specified arrays contain themselves as elements either 
  directly or indirectly through one or more levels of arrays, the behavior of 
  this method is undefined. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a1</CODE> - one array to be tested for equality
    <DD><CODE>a2</CODE> - the other array to be tested for equality 
    <DT><B>Returns:</B>
    <DD><TT>true</TT> if the two arrays are equal
    <DT><B>Since:</B></DT>
    <DD>1.5</DD>
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals(java.lang.Object[], java.lang.Object[])"><CODE>equals(Object[],Object[])</CODE></A></DD></DL></DD></DL>
<HR>
<A name=toString(long[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(long[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(long)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(int[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(int[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(int)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(short[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(short[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(short)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(char[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(char[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(char)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(byte[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(byte[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(byte)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(boolean[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(boolean[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(boolean)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(float[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(float[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(float)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(double[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(double[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. 
  The string representation consists of a list of the array's elements, enclosed 
  in square brackets (<TT>"[]"</TT>). Adjacent elements are separated by the 
  characters <TT>", "</TT> (a comma followed by a space). Elements are converted 
  to strings as by <TT>String.valueOf(double)</TT>. Returns <TT>"null"</TT> if 
  <TT>a</TT> is <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>
<A name=toString(java.lang.Object[])><!-- --></A>
<H3>toString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>toString</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the contents of the specified array. If 
  the array contains other arrays as elements, they are converted to strings by 
  the <A 
  href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#toString()"><CODE>Object.toString()</CODE></A> 
  method inherited from <TT>Object</TT>, which describes their <I>identities</I> 
  rather than their contents. 
  <P>The value returned by this method is equal to the value that would be 
  returned by <TT>Arrays.asList(a).toString()</TT>, unless <TT>a</TT> is 
  <TT>null</TT>, in which case <TT>"null"</TT> is returned. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD>
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepToString(java.lang.Object[])"><CODE>deepToString(Object[])</CODE></A></DD></DL></DD></DL>
<HR>
<A name=deepToString(java.lang.Object[])><!-- --></A>
<H3>deepToString</H3><PRE>public static <A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html">String</A> <B>deepToString</B>(<A title="class in java.lang" href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">Object</A>[]&nbsp;a)</PRE>
<DL>
  <DD>Returns a string representation of the "deep contents" of the specified 
  array. If the array contains other arrays as elements, the string 
  representation contains their contents and so on. This method is designed for 
  converting multidimensional arrays to strings. 
  <P>The string representation consists of a list of the array's elements, 
  enclosed in square brackets (<TT>"[]"</TT>). Adjacent elements are separated 
  by the characters <TT>", "</TT> (a comma followed by a space). Elements are 
  converted to strings as by <TT>String.valueOf(Object)</TT>, unless they are 
  themselves arrays. 
  <P>If an element <TT>e</TT> is an array of a primitive type, it is converted 
  to a string as by invoking the appropriate overloading of 
  <TT>Arrays.toString(e)</TT>. If an element <TT>e</TT> is an array of a 
  reference type, it is converted to a string as by invoking this method 
  recursively. 
  <P>To avoid infinite recursion, if the specified array contains itself as an 
  element, or contains an indirect reference to itself through one or more 
  levels of arrays, the self-reference is converted to the string 
  <TT>"[...]"</TT>. For example, an array containing only a reference to itself 
  would be rendered as <TT>"[[...]]"</TT>. 
  <P>This method returns <TT>"null"</TT> if the specified array is 
  <TT>null</TT>. 
  <P></P>
  <DD>
  <DL>
    <DT><B>Parameters:</B>
    <DD><CODE>a</CODE> - the array whose string representation to return 
    <DT><B>Returns:</B>
    <DD>a string representation of <TT>a</TT>
    <DT><B>Since:</B></DT>
    <DD>1.5</DD>
    <DT><B>See Also:</B>
    <DD><A 
    href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString(java.lang.Object[])"><CODE>toString(Object[])</CODE></A></DD></DL></DD></DL><!-- ========= END OF CLASS DATA ========= -->
<HR>
<!-- ======= START OF BOTTOM NAVBAR ====== --><A 
name=navbar_bottom><!-- --></A><A title="Skip navigation links" 
href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#skip-navbar_bottom"></A>
<TABLE border=0 cellSpacing=0 summary="" cellPadding=1 width="100%">
  <TBODY>
  <TR>
    <TD class=NavBarCell1 bgColor=#eeeeff colSpan=2><A 
      name=navbar_bottom_firstrow><!-- --></A>
      <TABLE border=0 cellSpacing=3 summary="" cellPadding=0>
        <TBODY>
        <TR vAlign=top align=middle>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/overview-summary.html"><FONT 
            class=NavBarFont1><B>Overview</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/package-summary.html"><FONT 
            class=NavBarFont1><B>Package</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1Rev bgColor=#ffffff>&nbsp;<FONT 
            class=NavBarFont1Rev><B>Class</B></FONT>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/class-use/Arrays.html"><FONT 
            class=NavBarFont1><B>Use</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/java/util/package-tree.html"><FONT 
            class=NavBarFont1><B>Tree</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/deprecated-list.html"><FONT 
            class=NavBarFont1><B>Deprecated</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/index-files/index-1.html"><FONT 
            class=NavBarFont1><B>Index</B></FONT></A>&nbsp;</TD>
          <TD class=NavBarCell1 bgColor=#eeeeff><A 
            href="http://docs.oracle.com/javase/6/docs/api/help-doc.html"><FONT 
            class=NavBarFont1><B>Help</B></FONT></A>&nbsp;</TD></TR></TBODY></TABLE></TD>
    <TD vAlign=top rowSpan=3 
      align=right><EM><B>Java™&nbsp;Platform<BR>Standard&nbsp;Ed.&nbsp;6</B></EM> 
    </TD></TR>
  <TR>
    <TD class=NavBarCell2 bgColor=white><FONT size=-2>&nbsp;<A 
      title="class in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html"><B>PREV 
      CLASS</B></A>&nbsp; &nbsp;<A title="class in java.util" 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/BitSet.html"><B>NEXT 
      CLASS</B></A></FONT></TD>
    <TD class=NavBarCell2 bgColor=white><FONT size=-2><A 
      href="http://docs.oracle.com/javase/6/docs/api/index.html?java/util/Arrays.html" 
      target=_top><B>FRAMES</B></A> &nbsp; &nbsp;<A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html" 
      target=_top><B>NO FRAMES</B></A> &nbsp; &nbsp;
      <SCRIPT type=text/javascript>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
       <NOSCRIPT><A 
      href="http://docs.oracle.com/javase/6/docs/api/allclasses-noframe.html"><B>All 
      Classes</B></A> </NOSCRIPT></FONT></TD></TR>
  <TR>
    <TD class=NavBarCell3 vAlign=top><FONT 
      size=-2>SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#method_summary">METHOD</A></FONT></TD>
    <TD class=NavBarCell3 vAlign=top><FONT 
      size=-2>DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A 
      href="http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#method_detail">METHOD</A></FONT></TD></TR></TBODY></TABLE><A 
name=skip-navbar_bottom></A><!-- ======== END OF BOTTOM NAVBAR ======= -->
<HR>
<FONT size=-1><A href="http://bugs.sun.com/services/bugreport/index.jsp">Submit 
a bug or feature</A><BR>For further API reference and developer documentation, 
see <A href="http://java.sun.com/javase/6/webnotes/devdocs-vs-specs.html">Java 
SE Developer Documentation</A>. That documentation contains more detailed, 
developer-targeted descriptions, with conceptual overviews, definitions of 
terms, workarounds, and working code examples.
<P><A href="http://docs.oracle.com/javase/6/docs/legal/cpyr.html">Copyright</A> 
© 1993, 2011, Oracle and/or its affiliates. All rights reserved. </FONT><!-- Start SiteCatalyst code   -->
<SCRIPT language=JavaScript src="Arrays_file/s_code_download.js"></SCRIPT>

<SCRIPT language=JavaScript src="Arrays_file/s_code.js"></SCRIPT>
<!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** --><!--  Below code will send the info to Omniture server -->
<SCRIPT 
language=javascript>var s_code=s.t();if(s_code)document.write(s_code)</SCRIPT>
<!-- End SiteCatalyst code --><NOSCRIPT>
<P>Scripting on this page tracks web page traffic, but does not change the 
content in any way.</P></NOSCRIPT></BODY></HTML>
